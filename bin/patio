#!/usr/bin/env node

var comb = require("comb"),
    Level = comb.logging.Level,
    path = require("path"),
    format = comb.string.format,
    patio = require("../index");

/**
 * Module dependencies.
 */

var program = require('commander');

program
    .version('0.0.1')
    .option('-d, --directory <path>', 'Directory of migrations')
    .option('-u, --uri <uri>', 'connection uri')
    .option('-t, --target [number]', 'target migration version')
    .option('-c, --current [number]', 'current migration version')
    .option('-tb, --table [string]', 'table to store schema information in')
    .option('-C, --column [string]', 'column to store schema information in.')
    .option('-v, --verbose [boolean]', 'set logging to debug', false)
    .option('-q, --quiet [boolean]', 'turn all logging off.', false)
    .option('-r, --rollback [boolean]', 'roll all migrations back', false)
    .option('--camelize [boolean]', 'force camel casing', false)
    .option('-us, --underscore [boolean]', 'force underscore', false)
    .parse(process.argv);

["directory", "uri"].forEach(function(arg){
    if (comb.isUndefined(program[arg])) {
        program.missingArgument(arg);
    }
});

if (program.underscore) {
    patio.underscore = true;
} else if (program.camelize) {
    patio.camelize = true;
}

new comb.logging.BasicConfigurator().configure();
patio.LOGGER.level = program.quiet ? Level.ERROR : program.verbose ? Level.DEBUG : Level.INFO;

var opts = {};

["target", "current", "table", "column"].forEach(function(arg){
    if (!comb.isUndefined(program[arg])) {
        opts[arg] = program[arg];
    }
});
if (program.rollback) {
    opts.target = -1;
}


var disconnectError = function(err){
    patio.logError(err);
    patio.disconnect();
};

var start = new Date();
patio.logInfo("Starting Migration");
patio.migrate(program.uri, path.resolve(process.cwd(), program.directory), opts).then(function(){
    patio.logInfo("Finished Migration");
    patio.logInfo(format("Duration: % 6dms", new Date() - start));
    patio.disconnect();
}, disconnectError);